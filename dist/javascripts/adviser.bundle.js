!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:o})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s="./client/scripts/adviser/index.js")}({"./client/scripts/ProgressBar.js":
/*!***************************************!*\
  !*** ./client/scripts/ProgressBar.js ***!
  \***************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}();var r=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return o(e,[{key:"showLoading",value:function(){var e=this;this.loadingElem=this._createLoading(),this.loadingInterval=setInterval(function(){e._progress()},1e3)}},{key:"hideLoading",value:function(){clearInterval(this.loadingInterval),this.loadingElem.style.width="100%",setTimeout(this._distructLoading,500)}},{key:"_createLoading",value:function(){var e=document.createElement("div");return e.setAttribute("id","nprogress"),e.style.width="0%",document.body.appendChild(e),e}},{key:"_distructLoading",value:function(){document.body.removeChild(document.querySelector("#nprogress"))}},{key:"_progress",value:function(){parseInt(this.loadingElem.style.width)>=95?clearInterval(this.loadingInterval):this.loadingElem.style.width=parseInt(this.loadingElem.style.width)+5+"%"}}]),e}();e.exports=r},"./client/scripts/adviser/Adviser.js":
/*!*******************************************!*\
  !*** ./client/scripts/adviser/Adviser.js ***!
  \*******************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}();var r=n(/*! axios */"./node_modules/axios/index.js"),s=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.initEvents(),this.reprepareQuestionsDesign(),this.redesignQuestions(),this._showingResult=!1}return o(e,[{key:"reprepareQuestionsDesign",value:function(){var e=document.querySelectorAll(".questionWrapper"),t=0,n=!0,o=!1,r=void 0;try{for(var s,i=e[Symbol.iterator]();!(n=(s=i.next()).done);n=!0){var a=s.value;if(/active/i.test(a.classList))break;t+=a.offsetHeight,console.log(a.offsetHeight)}}catch(e){o=!0,r=e}finally{try{!n&&i.return&&i.return()}finally{if(o)throw r}}(t+=$$(".questionWrapper.active").offsetHeight/2)<$$(".chooserWrapper").offsetHeight?$$(".chooserSliderWrapper").style.transform="translateY("+($$(".chooserWrapper").offsetHeight/2-t)+"px)":(console.log(t),$$(".chooserSliderWrapper").style.transform="translateY(-"+(t-$$(".chooserWrapper").offsetHeight/2)+"px)")}},{key:"initEvents",value:function(){var e=this;$$(".startBtn").onclick=function(){$$(".startBtn").setAttribute("data-started",!0),$$(".startBtn").querySelector("span").textContent="Start Over",$$(".startBtn").style.width="50%",$$(".startWrapper").onclick=function(){e.reset()},$$(".chooserWrapper").style.transform="translateX(0px) translateZ(0px)",$$(".startWrapper").style.transform="rotateY(45deg) translateZ(-500px)";var t=e;document.querySelectorAll(".questionWrapper").forEach(function(e){e.onclick=function(){t._showingResult?t.hideResults():$$(".questionWrapper.active").classList.remove("active"),this.classList.add("active"),t.reprepareQuestionsDesign(),t.redesignQuestions()}}),document.querySelectorAll(".option").forEach(function(e){e.onclick=function(e){e.stopPropagation(),this.parentNode.querySelector(".option.active").classList.remove("active"),this.classList.add("active");var n=$$(".questionWrapper.active");n.nextElementSibling&&(n.classList.remove("active"),n.nextElementSibling.classList.add("active"),t.reprepareQuestionsDesign(),t.redesignQuestions())}}),document.querySelectorAll(".questionWrapper:last-of-type .option").forEach(function(e){e.onclick=function(e){e.stopPropagation(),this.parentNode.querySelector(".option.active").classList.remove("active"),this.classList.add("active");var n=$$(".questionWrapper.active");n.nextElementSibling&&(n.classList.remove("active"),n.nextElementSibling.classList.add("active"),t.reprepareQuestionsDesign(),t.redesignQuestions()),t.advice()}})}}},{key:"redesignQuestions",value:function(){for(var e=$$(".questionWrapper.active"),t=e,n=0;t;n++)t.style.transform="scale("+(1-.1*n)+")",t=t.previousElementSibling;t=e;for(var o=0;t;o++)t.style.transform="scale("+(1-.2*o)+")",t=t.nextElementSibling}},{key:"advice",value:function(){var e=this;this.showLoading();var t={commercialUse:!0,destribution:!0,modification:!0,patentUse:!1,privateUse:!0,discloseSource:!1,licenseAndCopyRightNotice:!0,sameLicense:!1,stateChange:!1,liability:!0,tradeMarkUse:!1,warranty:!0};document.querySelectorAll(".questionWrapper").forEach(function(e){var n=e.getAttribute("data-name"),o=e.querySelector(".option.active");if(1==(o=o.getAttribute("data-value")))o=!0;else{if(2!=o)return;o=!1}t[n]=o}),this.getResults(t).then(function(t){e.showResults(t.data),e.hideLoading()}).catch(this.hideLoading)}},{key:"getResults",value:function(e){return new Promise(function(t,n){r.post("/api/adviser/advice",{answers:e}).then(function(e){t(e)}).catch(n)})}},{key:"showResults",value:function(e){e=e.slice(0,3),$$(".resultsWrapper ul").innerHTML="";var t=!0,n=!1,o=void 0;try{for(var r,s=e[Symbol.iterator]();!(t=(r=s.next()).done);t=!0){var i=r.value;$$(".resultsWrapper ul").innerHTML+='<li><span class="licenseName">'+i.name+'</span><i class="help"></i><span class="percent">'+100*i.mark+"%</span></li>"}}catch(e){n=!0,o=e}finally{try{!t&&s.return&&s.return()}finally{if(n)throw o}}$$(".chooserSliderWrapper").style.transform="translateY(-"+($$(".chooserSliderWrapper").offsetHeight-100)+"px)",$$(".questionWrapper:last-of-type").classList.remove("active"),$$(".questionWrapper:last-of-type").style.transform="scale(0.6)",$$(".questionWrapper:last-of-type").style.opacity="0.8",$$(".resultsWrapper").style.top="50%",this._showingResult=!0}},{key:"hideResults",value:function(){this._showingResult=!1,$$(".resultsWrapper").style.top="150%"}},{key:"showLoading",value:function(){$$(".chooserSliderWrapper").classList.add("beingLoaded"),$$(".chooserWrapper .loading").classList.add("show")}},{key:"hideLoading",value:function(){$$(".chooserSliderWrapper").classList.remove("beingLoaded"),$$(".chooserWrapper .loading").classList.remove("show")}},{key:"reset",value:function(){document.querySelectorAll(".questionWrapper").forEach(function(e){e.querySelector(".option.active").classList.remove("active"),e.querySelector('.option[data-value="3"]').classList.add("active")}),this._showingResult?this.hideResults():$$(".questionWrapper.active").classList.remove("active"),$$(".questionWrapper:first-of-type").classList.add("active"),this.reprepareQuestionsDesign(),this.redesignQuestions()}}]),e}();e.exports=s},"./client/scripts/adviser/index.js":
/*!*****************************************!*\
  !*** ./client/scripts/adviser/index.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,n){"use strict";window.$$=function(e){return document.querySelector(e)};var o=n(/*! ../ProgressBar */"./client/scripts/ProgressBar.js"),r=n(/*! ./Adviser */"./client/scripts/adviser/Adviser.js"),s=new o;new r;s.showLoading(),document.addEventListener("pjax:start",function(){s.showLoading()}),document.addEventListener("pjax:end",function(){s.hideLoading()}),window.onload=function(){s.hideLoading()}},"./node_modules/axios/index.js":
/*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
/*! no static exports found */function(e,t,n){e.exports=n(/*! ./lib/axios */"./node_modules/axios/lib/axios.js")},"./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ./../utils */"./node_modules/axios/lib/utils.js"),r=n(/*! ./../core/settle */"./node_modules/axios/lib/core/settle.js"),s=n(/*! ./../helpers/buildURL */"./node_modules/axios/lib/helpers/buildURL.js"),i=n(/*! ./../helpers/parseHeaders */"./node_modules/axios/lib/helpers/parseHeaders.js"),a=n(/*! ./../helpers/isURLSameOrigin */"./node_modules/axios/lib/helpers/isURLSameOrigin.js"),u=n(/*! ../core/createError */"./node_modules/axios/lib/core/createError.js"),c="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(/*! ./../helpers/btoa */"./node_modules/axios/lib/helpers/btoa.js");e.exports=function(e){return new Promise(function(t,l){var d=e.data,f=e.headers;o.isFormData(d)&&delete f["Content-Type"];var p=new XMLHttpRequest,h="onreadystatechange",m=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in p||a(e.url)||(p=new window.XDomainRequest,h="onload",m=!0,p.onprogress=function(){},p.ontimeout=function(){}),e.auth){var v=e.auth.username||"",y=e.auth.password||"";f.Authorization="Basic "+c(v+":"+y)}if(p.open(e.method.toUpperCase(),s(e.url,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p[h]=function(){if(p&&(4===p.readyState||m)&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in p?i(p.getAllResponseHeaders()):null,o={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:1223===p.status?204:p.status,statusText:1223===p.status?"No Content":p.statusText,headers:n,config:e,request:p};r(t,l,o),p=null}},p.onerror=function(){l(u("Network Error",e,null,p)),p=null},p.ontimeout=function(){l(u("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",p)),p=null},o.isStandardBrowserEnv()){var g=n(/*! ./../helpers/cookies */"./node_modules/axios/lib/helpers/cookies.js"),x=(e.withCredentials||a(e.url))&&e.xsrfCookieName?g.read(e.xsrfCookieName):void 0;x&&(f[e.xsrfHeaderName]=x)}if("setRequestHeader"in p&&o.forEach(f,function(e,t){void 0===d&&"content-type"===t.toLowerCase()?delete f[t]:p.setRequestHeader(t,e)}),e.withCredentials&&(p.withCredentials=!0),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){p&&(p.abort(),l(e),p=null)}),void 0===d&&(d=null),p.send(d)})}},"./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ./utils */"./node_modules/axios/lib/utils.js"),r=n(/*! ./helpers/bind */"./node_modules/axios/lib/helpers/bind.js"),s=n(/*! ./core/Axios */"./node_modules/axios/lib/core/Axios.js"),i=n(/*! ./defaults */"./node_modules/axios/lib/defaults.js");function a(e){var t=new s(e),n=r(s.prototype.request,t);return o.extend(n,s.prototype,t),o.extend(n,t),n}var u=a(i);u.Axios=s,u.create=function(e){return a(o.merge(i,e))},u.Cancel=n(/*! ./cancel/Cancel */"./node_modules/axios/lib/cancel/Cancel.js"),u.CancelToken=n(/*! ./cancel/CancelToken */"./node_modules/axios/lib/cancel/CancelToken.js"),u.isCancel=n(/*! ./cancel/isCancel */"./node_modules/axios/lib/cancel/isCancel.js"),u.all=function(e){return Promise.all(e)},u.spread=n(/*! ./helpers/spread */"./node_modules/axios/lib/helpers/spread.js"),e.exports=u,e.exports.default=u},"./node_modules/axios/lib/cancel/Cancel.js":
/*!*************************************************!*\
  !*** ./node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,n){"use strict";function o(e){this.message=e}o.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},o.prototype.__CANCEL__=!0,e.exports=o},"./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ./Cancel */"./node_modules/axios/lib/cancel/Cancel.js");function r(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new o(e),t(n.reason))})}r.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},r.source=function(){var e;return{token:new r(function(t){e=t}),cancel:e}},e.exports=r},"./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},"./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ./../defaults */"./node_modules/axios/lib/defaults.js"),r=n(/*! ./../utils */"./node_modules/axios/lib/utils.js"),s=n(/*! ./InterceptorManager */"./node_modules/axios/lib/core/InterceptorManager.js"),i=n(/*! ./dispatchRequest */"./node_modules/axios/lib/core/dispatchRequest.js");function a(e){this.defaults=e,this.interceptors={request:new s,response:new s}}a.prototype.request=function(e){"string"==typeof e&&(e=r.merge({url:arguments[0]},arguments[1])),(e=r.merge(o,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[i,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},r.forEach(["delete","get","head","options"],function(e){a.prototype[e]=function(t,n){return this.request(r.merge(n||{},{method:e,url:t}))}}),r.forEach(["post","put","patch"],function(e){a.prototype[e]=function(t,n,o){return this.request(r.merge(o||{},{method:e,url:t,data:n}))}}),e.exports=a},"./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ./../utils */"./node_modules/axios/lib/utils.js");function r(){this.handlers=[]}r.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},r.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},r.prototype.forEach=function(e){o.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=r},"./node_modules/axios/lib/core/createError.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/createError.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ./enhanceError */"./node_modules/axios/lib/core/enhanceError.js");e.exports=function(e,t,n,r,s){var i=new Error(e);return o(i,t,n,r,s)}},"./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ./../utils */"./node_modules/axios/lib/utils.js"),r=n(/*! ./transformData */"./node_modules/axios/lib/core/transformData.js"),s=n(/*! ../cancel/isCancel */"./node_modules/axios/lib/cancel/isCancel.js"),i=n(/*! ../defaults */"./node_modules/axios/lib/defaults.js"),a=n(/*! ./../helpers/isAbsoluteURL */"./node_modules/axios/lib/helpers/isAbsoluteURL.js"),u=n(/*! ./../helpers/combineURLs */"./node_modules/axios/lib/helpers/combineURLs.js");function c(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return c(e),e.baseURL&&!a(e.url)&&(e.url=u(e.baseURL,e.url)),e.headers=e.headers||{},e.data=r(e.data,e.headers,e.transformRequest),e.headers=o.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),o.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||i.adapter)(e).then(function(t){return c(e),t.data=r(t.data,t.headers,e.transformResponse),t},function(t){return s(t)||(c(e),t&&t.response&&(t.response.data=r(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},"./node_modules/axios/lib/core/enhanceError.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=function(e,t,n,o,r){return e.config=t,n&&(e.code=n),e.request=o,e.response=r,e}},"./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ./createError */"./node_modules/axios/lib/core/createError.js");e.exports=function(e,t,n){var r=n.config.validateStatus;n.status&&r&&!r(n.status)?t(o("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},"./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ./../utils */"./node_modules/axios/lib/utils.js");e.exports=function(e,t,n){return o.forEach(n,function(n){e=n(e,t)}),e}},"./node_modules/axios/lib/defaults.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/defaults.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){"use strict";(function(t){var o=n(/*! ./utils */"./node_modules/axios/lib/utils.js"),r=n(/*! ./helpers/normalizeHeaderName */"./node_modules/axios/lib/helpers/normalizeHeaderName.js"),s={"Content-Type":"application/x-www-form-urlencoded"};function i(e,t){!o.isUndefined(e)&&o.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var a,u={adapter:("undefined"!=typeof XMLHttpRequest?a=n(/*! ./adapters/xhr */"./node_modules/axios/lib/adapters/xhr.js"):void 0!==t&&(a=n(/*! ./adapters/http */"./node_modules/axios/lib/adapters/xhr.js")),a),transformRequest:[function(e,t){return r(t,"Content-Type"),o.isFormData(e)||o.isArrayBuffer(e)||o.isBuffer(e)||o.isStream(e)||o.isFile(e)||o.isBlob(e)?e:o.isArrayBufferView(e)?e.buffer:o.isURLSearchParams(e)?(i(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):o.isObject(e)?(i(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},o.forEach(["delete","get","head"],function(e){u.headers[e]={}}),o.forEach(["post","put","patch"],function(e){u.headers[e]=o.merge(s)}),e.exports=u}).call(this,n(/*! ./../../process/browser.js */"./node_modules/process/browser.js"))},"./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),o=0;o<n.length;o++)n[o]=arguments[o];return e.apply(t,n)}}},"./node_modules/axios/lib/helpers/btoa.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/btoa.js ***!
  \************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function r(){this.message="String contains an invalid character"}r.prototype=new Error,r.prototype.code=5,r.prototype.name="InvalidCharacterError",e.exports=function(e){for(var t,n,s=String(e),i="",a=0,u=o;s.charAt(0|a)||(u="=",a%1);i+=u.charAt(63&t>>8-a%1*8)){if((n=s.charCodeAt(a+=.75))>255)throw new r;t=t<<8|n}return i}},"./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ./../utils */"./node_modules/axios/lib/utils.js");function r(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var s;if(n)s=n(t);else if(o.isURLSearchParams(t))s=t.toString();else{var i=[];o.forEach(t,function(e,t){null!==e&&void 0!==e&&(o.isArray(e)?t+="[]":e=[e],o.forEach(e,function(e){o.isDate(e)?e=e.toISOString():o.isObject(e)&&(e=JSON.stringify(e)),i.push(r(t)+"="+r(e))}))}),s=i.join("&")}return s&&(e+=(-1===e.indexOf("?")?"?":"&")+s),e}},"./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},"./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ./../utils */"./node_modules/axios/lib/utils.js");e.exports=o.isStandardBrowserEnv()?{write:function(e,t,n,r,s,i){var a=[];a.push(e+"="+encodeURIComponent(t)),o.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),o.isString(r)&&a.push("path="+r),o.isString(s)&&a.push("domain="+s),!0===i&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},"./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},"./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ./../utils */"./node_modules/axios/lib/utils.js");e.exports=o.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function r(e){var o=e;return t&&(n.setAttribute("href",o),o=n.href),n.setAttribute("href",o),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=r(window.location.href),function(t){var n=o.isString(t)?r(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},"./node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ../utils */"./node_modules/axios/lib/utils.js");e.exports=function(e,t){o.forEach(e,function(n,o){o!==t&&o.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[o])})}},"./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ./../utils */"./node_modules/axios/lib/utils.js"),r=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,s,i={};return e?(o.forEach(e.split("\n"),function(e){if(s=e.indexOf(":"),t=o.trim(e.substr(0,s)).toLowerCase(),n=o.trim(e.substr(s+1)),t){if(i[t]&&r.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([n]):i[t]?i[t]+", "+n:n}}),i):i}},"./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},"./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ./helpers/bind */"./node_modules/axios/lib/helpers/bind.js"),r=n(/*! is-buffer */"./node_modules/is-buffer/index.js"),s=Object.prototype.toString;function i(e){return"[object Array]"===s.call(e)}function a(e){return null!==e&&"object"==typeof e}function u(e){return"[object Function]"===s.call(e)}function c(e,t){if(null!==e&&void 0!==e)if("object"!=typeof e&&(e=[e]),i(e))for(var n=0,o=e.length;n<o;n++)t.call(null,e[n],n,e);else for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.call(null,e[r],r,e)}e.exports={isArray:i,isArrayBuffer:function(e){return"[object ArrayBuffer]"===s.call(e)},isBuffer:r,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:a,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===s.call(e)},isFile:function(e){return"[object File]"===s.call(e)},isBlob:function(e){return"[object Blob]"===s.call(e)},isFunction:u,isStream:function(e){return a(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:c,merge:function e(){var t={};function n(n,o){"object"==typeof t[o]&&"object"==typeof n?t[o]=e(t[o],n):t[o]=n}for(var o=0,r=arguments.length;o<r;o++)c(arguments[o],n);return t},extend:function(e,t,n){return c(t,function(t,r){e[r]=n&&"function"==typeof t?o(t,n):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},"./node_modules/is-buffer/index.js":
/*!*****************************************!*\
  !*** ./node_modules/is-buffer/index.js ***!
  \*****************************************/
/*! no static exports found */function(e,t){function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(n(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&n(e.slice(0,0))}(e)||!!e._isBuffer)}},"./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */function(e,t){var n,o,r=e.exports={};function s(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===s||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:s}catch(e){n=s}try{o="function"==typeof clearTimeout?clearTimeout:i}catch(e){o=i}}();var u,c=[],l=!1,d=-1;function f(){l&&u&&(l=!1,u.length?c=u.concat(c):d=-1,c.length&&p())}function p(){if(!l){var e=a(f);l=!0;for(var t=c.length;t;){for(u=c,c=[];++d<t;)u&&u[d].run();d=-1,t=c.length}u=null,l=!1,function(e){if(o===clearTimeout)return clearTimeout(e);if((o===i||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(e);try{o(e)}catch(t){try{return o.call(null,e)}catch(t){return o.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}r.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new h(e,t)),1!==c.length||l||a(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=m,r.addListener=m,r.once=m,r.off=m,r.removeListener=m,r.removeAllListeners=m,r.emit=m,r.prependListener=m,r.prependOnceListener=m,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,